#!/bin/bash

###############################################################################
# Script Name: format_penncnv_cnv.sh
# Description: This script processes a CNV file generated by PennCNV (gzipped or not),
#              filters high-confidence CNVs (≥3 probes, confidence ≥15, length ≥1000 bp),
#              parses relevant fields (including cleaning prefixes), extracts
#              sample ID from the file path, standardizes the format, and outputs
#              a tab-delimited TSV file (gzipped or not) for downstream analyses.
#
# Usage: ./format_penncnv_cnv.sh <penncnv_out_input_file[.gz]> <output_file[.gz]>
#
# Author: Florian Bénitière
# Date: April 2025
###############################################################################

set -euo pipefail

# Check input arguments
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <penncnv_out_input_file[.gz]> <output_file[.gz]>"
    exit 1
fi

# Assign input and output from arguments
input_file="$1"
output_file="$2"


# Determine whether the input file is gzipped
if [[ "$input_file" == *.gz ]]; then
    read_cmd="zcat"
    # Optionally fallback to gunzip -c if zcat not available
    if ! command -v zcat &>/dev/null; then
        read_cmd="gunzip -c"
    fi
else
    read_cmd="cat"
fi

# Extracts and reformats key CNV fields from a PennCNV file, standardizes values, and outputs a compressed tab-delimited file.
$read_cmd "${input_file}" | awk 'BEGIN {
    print "SampleID\tChr\tStart\tEnd\tCopy_Number\tConfidence\tNum_Probes\tLength\tStart_SNP\tEnd_SNP"
}
{
    # Parse chr:start-end
    split($1, a, /[:-]/)
    chr = a[1]
    start = a[2]
    end = a[3]

    # Remove prefix from fields
    nbprobes = $2
    sub(/^numsnp=/, "", nbprobes)

    len = $3
    sub(/^length=/, "", len)
    gsub(/,/, "", len)

    copynumber = $4
    sub(/^.*cn=/, "", copynumber)

    # SampleID extraction from file path
    n = split($5, parts, "/")
    split(parts[n], name_parts, ".")
    sample = name_parts[1]

    startsnp = $6
    sub(/^startsnp=/, "", startsnp)

    endsnp = $7
    sub(/^endsnp=/, "", endsnp)

    conf = $8
    sub(/^conf=/, "", conf)

    # Force numeric conversion
    nbprobes += 0
    len += 0
    conf += 0

    print sample"\t"chr"\t"start"\t"end"\t"copynumber"\t"conf"\t"nbprobes"\t"len"\t"startsnp"\t"endsnp
}' | {
    if [[ "$output_file" == *.gz ]]; then
        gzip > "$output_file"
    else
        cat > "$output_file"
    fi
}
