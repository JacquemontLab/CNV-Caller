

//Slurm cluster options
//executor.perCpuMemAllocation = true
clusterOptions = '--account=rrg-jacquese'


maxRetries = 4
errorStrategy = { task.exitStatus in [125,139] ? 'retry' : 'finish' }
memory = { check_max( 4.GB * task.attempt, 'memory' ) }


//Apptainer config, binding access to sample data
apptainer {
  autoMounts = true
  enabled = true
  runOptions = "--bind /lustre06/project/6008022/All_user_common_folder/RAW_DATA"
}

//Process requirements
process {
    executor = 'local'   // Use local executor, or use 'slurm', 'pbs', etc., based on your environment.
    maxForks = 100       // Max number of parallel jobs allowed, we need to make sure not to crowd out the login node

    withName: collect_plink_data {
        module = ['StdEnv/2020','plink/1.9b_6.21-x86_64']
    }
    
    withName: generate_gcmodel {
        module = ['StdEnv/2023', 'bedtools/2.31.0']
    }


    withName: generate_pfb {
        executor = 'slurm'
        clusterOptions = '--account=rrg-jacquese --mem-per-cpu=7000MB'
        time = '1h'
        cpus = 16
        //memory = '3500MB'
        beforeScript =      '''
                            module load python/3.13.2
                            module load scipy-stack
                            virtualenv --no-download $SLURM_TMPDIR/env
                            source $SLURM_TMPDIR/env/bin/activate
                            pip install --no-index --upgrade pip
                            pip install --no-index tqdm
                           '''
    }

    withName: generate_duck_pfb {
        executor = 'slurm'
        time = '1h'
        cpus = 16
        clusterOptions = '--account=rrg-jacquese --mem-per-cpu=3500MB'
        beforeScript =      '''
                            source /lustre06/project/6008022/clarkb/environments/polars/bin/activate
                            '''
    }

    withName: callBatchCNVs {
        executor = 'slurm'
        cpus = 64
        time = '1h'
        clusterOptions = '--account=rrg-jacquese --mem-per-cpu=3500MB'
        //memory = '8000MB'
        module = ['apptainer/1.3.5', 'StdEnv/2023']
        container = '/lustre06/project/6008022/All_user_common_folder/SOFTWARE/BETA_TESTING/pgc-tcag-with-ps.sif'
        }


    withName: MERGE_CNV_CALLS {
        module = 'bedtools/2.31.0'
        }
}

nextflow.enable.moduleBinaries = true


//COPIED from Narval CCDB nextflow config

executor {
  pollInterval = '60 sec'
  submitRateLimit = '60/1min'
  queueSize = 100 
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}